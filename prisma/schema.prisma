// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

enum CycleMarker {
  START
  END
}

model ActivityType {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  activities  Activity[]
  cycleMarker CycleMarker?
}

enum RecordCategory {
  income
  expense
}

model RecordCategoryType {
  id       Int      @id @default(autoincrement())
  name     String   @unique
  category RecordCategory @default(expense)
  records  Record[]
}

model Plot {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  area       Float
  crop       String?
  isArchived Boolean    @default(false)
  activities Activity[]
  cycles     Cycle[]
}

model Cycle {
  id              Int        @id @default(autoincrement())
  plot            Plot       @relation(fields: [plotId], references: [id])
  plotId          Int
  crop            String?
  budget          Float?
  startDate       DateTime
  endDate         DateTime?
  status          String     // "ongoing", "completed", "aborted"
  activities      Activity[] @relation("CycleActivities")
  startActivity   Activity?  @relation("StartActivity", fields: [startActivityId], references: [id])
  startActivityId Int?       @unique
  endActivity     Activity?  @relation("EndActivity", fields: [endActivityId], references: [id])
  endActivityId   Int?       @unique
}

model Activity {
  id             Int          @id @default(autoincrement())
  type           ActivityType @relation(fields: [activityTypeId], references: [id])
  activityTypeId Int
  date           DateTime     @default(now())
  plot           Plot         @relation(fields: [plotId], references: [id])
  plotId         Int
  crop           String?      // 作物快照，保证历史准确性
  records        Record[]
  cycle          Cycle?       @relation("CycleActivities", fields: [cycleId], references: [id])
  cycleId        Int?
  startedCycle   Cycle?       @relation("StartActivity")
  endedCycle     Cycle?       @relation("EndActivity")
}

model Record {
  id           Int                @id @default(autoincrement())
  amount       Float
  type         RecordCategoryType @relation(fields: [recordTypeId], references: [id])
  recordTypeId Int
  date         DateTime           @default(now())
  description  String?
  activity     Activity?          @relation(fields: [activityId], references: [id])
  activityId   Int?
}